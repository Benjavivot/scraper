import gspread
from oauth2client.service_account import ServiceAccountCredentials
import requests
from bs4 import BeautifulSoup

def scrape_google_ads_announcements():
    url = 'https://support.google.com/google-ads/announcements/9048695?hl=es'
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')

    announcements = []

    # Encuentra todos los artículos
    articles = soup.find_all('li', class_='announcement__post')
    print(f'Número de artículos encontrados: {len(articles)}')  # Para depuración

    for article in articles:
        title = article.find('h2', class_='announcement__post-title').get_text(strip=True) if article.find('h2', class_='announcement__post-title') else ''
        description = article.find('div', class_='announcement__post-body-content').get_text(strip=True) if article.find('div', class_='announcement__post-body-content') else ''
        date = article.find('h3', class_='announcement__post-sub-head').get_text(strip=True) if article.find('h3', class_='announcement__post-sub-head') else ''
        link = article.find('a', class_='announcement__post-body-read-more-link')['href'] if article.find('a', class_='announcement__post-body-read-more-link') else ''
        full_link = f'https://support.google.com{link}'  # Concatenar el link base

        # Agregar los datos a la lista
        announcements.append([title, title, description, description, date, full_link])

    # Limitar a los primeros 20 artículos
    return announcements[:20]

def update_google_sheet(announcements):
    # Configura tu ID de hoja de cálculo y el rango
    SPREADSHEET_ID = '1SFzK3drb7xRo53efGHHx4UzR_KDfs4pYPUkkZps2Kaw'
    RANGE_NAME = 'Google Ads!B2:G21'  # Actualizar el rango para incluir más filas

    # Autenticación y construcción del servicio de la API
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name('scraper-429709-76bb14ed8235.json', scope)
    client = gspread.authorize(creds)
    sheet = client.open_by_key(SPREADSHEET_ID).worksheet("Google Ads")

    # Crear el rango de celdas adecuado
    num_rows = len(announcements)
    num_cols = len(announcements[0]) if num_rows > 0 else 0

    # Crear el rango de celdas adecuado
    start_row = 2
    end_row = start_row + num_rows - 1
    end_col = chr(65 + num_cols)  # Convertir número de columna a letra
    cell_range = f'B{start_row}:{end_col}{end_row}'

    # Depuración: imprime el rango y los datos
    print(f'Actualizando rango: {cell_range}')
    print('Datos a actualizar:')
    for row in announcements:
        print(row)

    # Actualizar la hoja de cálculo usando el formato actualizado
    try:
        sheet.update(range_name=cell_range, values=announcements)
        print("Datos actualizados exitosamente.")
    except Exception as e:
        print(f"Error al actualizar: {e}")

def main():
    # Obtener los anuncios
    announcements = scrape_google_ads_announcements()
    update_google_sheet(announcements)

if __name__ == "__main__":
    main()

